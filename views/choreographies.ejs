<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="/css/nouislider.min.css">
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f9f9f9;
      margin: 0;
      padding: 0;
      text-align: center;
    }
    h1 {
      margin: 20px 0;
      color: #ff7e5f;
    }
    .choreographies-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 20px;
      margin: 20px auto;
    }
    .choreography {
      background: #fff;
      color: #333;
      border-radius: 10px;
      padding: 10px;
      text-align: center;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      max-width: 300px;
      position: relative;
    }
    .choreography img {
      width: 100%;
      border-radius: 10px;
    }
    .play-button {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0, 0, 0, 0.6);
      color: #fff;
      border: none;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 1.5rem;
    }
    .play-button:hover {
      background: rgba(0, 0, 0, 0.8);
    }
    .choreography h3 {
      font-size: 1rem;
      margin: 10px 0;
    }
    .btn {
      display: inline-block;
      margin: 10px;
      padding: 10px 20px;
      font-size: 1rem;
      color: #fff;
      background: #ff7e5f;
      border: none;
      border-radius: 5px;
      text-decoration: none;
      transition: background 0.3s;
    }
    .btn:hover {
      background: #feb47b;
    }
    .message {
      margin: 20px;
      font-size: 1.2rem;
      color: #ff7e5f;
    }
    #time-selection-dialog {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: #fff;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
      z-index: 1001;
    }
    #camera-container {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.9);
      z-index: 1000;
      justify-content: center;
      align-items: center;
      flex-direction: column;
    }
    #camera-container video {
      width: 80%;
      height: auto;
      border-radius: 10px;
    }
    #camera-container .controls {
      margin-top: 20px;
      display: flex;
      gap: 20px;
    }
    #camera-container .controls .icon {
      width: 70px;
      height: 70px;
      background: #ff7e5f;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      color: #fff;
    }
    #camera-container .controls .icon:hover {
      background: #feb47b;
    }
    .range-container {
      display: flex;
      justify-content: space-between;
      margin: 10px 0;
    }
    .time-display {
      display: flex;
      justify-content: space-between;
      margin: 10px 0;
      font-size: 1.2rem;
    }    /* Add these styles */
    .modal {
      display: none; /* Initially hidden */
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      z-index: 1000;
      overflow-y: auto;
      justify-content: center;
      align-items: flex-start;
      padding: 20px 0;
    }

    .modal-content {
      position: relative;
      background: #fff;
      margin: 50px auto;
      padding: 20px;
      width: 80%;
      max-width: 800px;
      border-radius: 10px;
      color: #333;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .time-slider-container {
      margin: 20px 0;
      padding: 20px;
    }

    .slider-labels {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
      font-size: 1.2rem;
    }

    input[type="range"] {
      width: 100%;
      margin: 10px 0;
    }    .preview-container {
      margin: 20px 0;
      background: #f1f1f1;
      border-radius: 10px;
      padding: 10px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1) inset;
      min-height: 100px;
    }

    .preview-container iframe {
      width: 100%;
      height: 400px;
      border: none;
      border-radius: 10px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }.modal-buttons {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-top: 20px;
      margin-bottom: 10px;
    }
    
    .modal-buttons .btn {
      padding: 10px 20px;
      font-size: 1rem;
      color: #fff;
      background: #ff7e5f;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s;
    }
    
    .modal-buttons .btn:hover {
      background: #feb47b;
    }

    .custom-slider {
      position: relative;
      width: 100%;
      height: 10px;
      background: #ddd;
      border-radius: 5px;
      margin: 20px 0;
    }

    .custom-slider .thumb {
      position: absolute;
      top: 50%;
      width: 20px;
      height: 20px;
      background: #ff7e5f;
      border-radius: 50%;
      transform: translate(-50%, -50%);
      cursor: pointer;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    .custom-slider .range {
      position: absolute;
      top: 0;
      height: 100%;
      background: #ff7e5f;
      border-radius: 5px;
    }
  </style>
</head>
<body>
  <h1><%= title %></h1>
  <% if (message) { %>
    <p class="message"><%= message %></p>
  <% } %>
  <div class="choreographies-container">
    <% if (choreographies.length > 0) { %>
      <% choreographies.forEach(choreography => { %>
        <div class="choreography">
          <img src="<%= choreography.thumbnail %>" alt="<%= choreography.title %>">
          <button 
            class="play-button" 
            onclick="playVideo('<%= choreography.videoId %>')">
            ▶
          </button>
          <h3><%= choreography.title %></h3>
          <button class="btn" onclick="openTimeSelection('<%= choreography.videoId %>', '<%= choreography.title %>')">Select This Choreography</button>
        </div>
      <% }) %>
    <% } else { %>
      <p>No choreographies found.</p>
    <% } %>
  </div>

  <!-- Time Selection Dialog -->
  <div id="time-selection-dialog">
    <p>Select the time range for the choreography:</p>
    <div class="range-container">
      <label for="start-time">Start Time:</label>
      <input type="range" id="start-time" min="0" max="0" value="0" step="1" oninput="updateTimeDisplay()">
      <label for="end-time">End Time:</label>
      <input type="range" id="end-time" min="0" max="0" value="0" step="1" oninput="updateTimeDisplay()">
    </div>
    <div class="time-display">
      <span id="start-time-display">0:00</span>
      <span id="end-time-display">0:00</span>
    </div>
    <button class="btn" onclick="previewTimeRange()">Preview</button>
    <button class="btn" onclick="confirmTimeSelection()">Confirm</button>
  </div>

  <!-- Camera Container -->
  <div id="camera-container">
    <video id="camera-video" autoplay></video>
    <div class="controls">
      <button class="icon" onclick="startRecording()">●</button>
      <button class="icon" onclick="setTimer()">⏱</button>
    </div>  </div>

  <!-- Fullscreen Video Container -->
  <div id="fullscreen-container" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.9); z-index: 1001; justify-content: center; align-items: center;">
    <iframe id="fullscreen-video" width="80%" height="80%" frameborder="0" allowfullscreen></iframe>
    <button onclick="document.getElementById('fullscreen-container').style.display='none'; document.getElementById('fullscreen-video').src='';" 
            style="position: absolute; top: 20px; right: 20px; background: #ff7e5f; border: none; color: white; padding: 10px; border-radius: 5px; cursor: pointer;">
      Close
    </button>
  </div>

  <!-- Add Time Selection Modal -->
  <div id="timeSelectionModal" class="modal">
    <div class="modal-content">
      <h2>Select Time Range</h2>
      <div class="time-slider-container">
        <div class="slider-labels">
          <span>Start Time: <span id="startTimeLabel">0:00</span></span>
          <span>End Time: <span id="endTimeLabel">0:00</span></span>
        </div>
        <input type="range" id="startTimeSlider" min="0" value="0" step="1" aria-label="Start time slider">
        <input type="range" id="endTimeSlider" min="0" value="10" step="1" aria-label="End time slider">
      </div>
      <div class="preview-container">
        <iframe id="previewVideo" allowfullscreen></iframe>
      </div>
      <div class="modal-buttons">
        <button class="btn" onclick="previewSelection()" aria-label="Preview selected time range">Preview</button>
        <button class="btn" onclick="confirmTimeSelection()" aria-label="Confirm selected time range">Confirm</button>
        <button class="btn" onclick="closeModal()" aria-label="Close modal">Cancel</button>
      </div>
    </div>
  </div>
  <div class="custom-slider" id="timeRangeSlider">
    <div class="range" id="sliderRange"></div>
    <div class="thumb" id="startThumb" tabindex="0" aria-label="Start time"></div>
    <div class="thumb" id="endThumb" tabindex="0" aria-label="End time"></div>
  </div>
  <script>
    // Define global variables
    let currentVideoId = '';
    let videoDuration = 0;
    
    function playVideo(videoId) {
      const container = document.getElementById('fullscreen-container');
      const iframe = document.getElementById('fullscreen-video');
      iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
      container.style.display = 'flex';
    }    async function openTimeSelection(videoId, title) {
      currentVideoId = videoId;
      const modal = document.getElementById('timeSelectionModal');
      
      // Fetch video duration
      videoDuration = await fetchVideoDuration(videoId);
      
      const startThumb = document.getElementById('startThumb');
      const endThumb = document.getElementById('endThumb');
      
      // Set slider range
      const sliderWidth = document.getElementById('timeRangeSlider').offsetWidth;
      startThumb.style.left = '0px';
      endThumb.style.left = `${sliderWidth}px`;
      
      // Set modal title
      const modalTitle = modal.querySelector('h2');
      if (modalTitle) {
        modalTitle.textContent = `Select Time Range for: ${title}`;
      }
      
      // Reset preview iframe
      const previewFrame = document.getElementById('previewVideo');
      if (previewFrame) {
        previewFrame.src = '';
      }
      
      // Show the modal
      modal.style.display = 'flex';

      // Update custom slider range
      initializeCustomSlider();

      trapFocus(modal); // Trap focus inside the modal
      
      console.log('Modal opened for video:', videoId, 'Duration:', videoDuration);
    }

    function updateTimeLabels() {
      const startTime = document.getElementById('startTimeSlider').value;
      const endTime = document.getElementById('endTimeSlider').value;
      
      document.getElementById('startTimeLabel').textContent = formatTime(startTime);
      document.getElementById('endTimeLabel').textContent = formatTime(endTime);
    }

    // Consolidated formatTime function
    function formatTime(seconds) {
      const mins = Math.floor(seconds / 60);
      const secs = Math.floor(seconds % 60);
      return mins + ':' + secs.toString().padStart(2, '0');
    }

    function previewSelection() {
      const startTime = document.getElementById('startTimeSlider').value;
      const endTime = document.getElementById('endTimeSlider').value;
      const previewFrame = document.getElementById('previewVideo');
      
      previewFrame.src = `https://www.youtube.com/embed/${currentVideoId}?start=${startTime}&end=${endTime}&autoplay=1`;
    }

    function confirmTimeSelection() {
      const startTime = parseInt(document.getElementById('startTimeSlider').value, 10);
      const endTime = parseInt(document.getElementById('endTimeSlider').value, 10);

      if (startTime >= endTime) {
        alert("Start time must be less than end time. Please adjust your selection.");
        return;
      }

      // Store time range in localStorage for camera.ejs to access
      localStorage.setItem('selectedTimeRange', JSON.stringify({
        videoId: currentVideoId,
        startTime,
        endTime
      }));

      // Close the modal
      closeModal();

      // Redirect to the camera page
      const cameraContainer = document.getElementById('camera-container');
      if (cameraContainer) {
        cameraContainer.style.display = 'flex';
        startCamera(); // Assuming startCamera is defined to initialize the camera
      } else {
        window.location.href = '/camera'; // Fallback to redirect if camera container is not present
      }
    }    function closeModal() {
      const modal = document.getElementById('timeSelectionModal');
      modal.style.display = 'none';
      const triggerButton = document.querySelector([onclick*="openTimeSelection('${currentVideoId}'"]);
      if (triggerButton) triggerButton.focus();
    }    function trapFocus(modal) {
      const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];

      modal.addEventListener('keydown', (e) => {
        if (e.key === 'Tab') {
          if (e.shiftKey) {
            if (document.activeElement === firstElement) {
              e.preventDefault();
              lastElement.focus();
            }
          } else {
            if (document.activeElement === lastElement) {
              e.preventDefault();
              firstElement.focus();
            }
          }
        }
      });

      firstElement.focus();
    }

    async function fetchVideoDuration(videoId) {
      try {
        const apiKey = '<%= process.env.YOUTUBE_API_KEY %>';
        const response = await fetch(`https://www.googleapis.com/youtube/v3/videos?part=contentDetails&id=${videoId}&key=${apiKey}`);
        const data = await response.json();
        
        if (data.items && data.items.length > 0 && data.items[0].contentDetails) {
          const duration = parseISO8601Duration(data.items[0].contentDetails.duration);
          return duration;
        } else {
          console.error('Failed to get video duration:', data);
          return 60; // Default to 1 minute if we can't get the duration
        }
      } catch (error) {
        console.error('Error fetching video duration:', error);
        return 60; // Default to 1 minute if there's an error
      }
    }

    function parseISO8601Duration(duration) {
      const match = duration.match(/PT(\d+H)?(\d+M)?(\d+S)?/);
      const hours = parseInt(match[1]) || 0;
      const minutes = parseInt(match[2]) || 0;
      const seconds = parseInt(match[3]) || 0;
      return hours * 3600 + minutes * 60 + seconds;
    }

    function openTimeSelectionDialog(duration) {
      const timeSelectionDialog = document.getElementById('time-selection-dialog');
      const startTimeInput = document.getElementById('start-time');
      const endTimeInput = document.getElementById('end-time');
      startTimeInput.max = duration;
      endTimeInput.max = duration;
      endTimeInput.value = duration;
      updateTimeDisplay();
      timeSelectionDialog.style.display = 'block';
    }

    function updateTimeDisplay() {
      const startTimeInput = document.getElementById('start-time');
      const endTimeInput = document.getElementById('end-time');
      const startTimeDisplay = document.getElementById('start-time-display');
      const endTimeDisplay = document.getElementById('end-time-display');

      // Ensure elements exist
      if (!startTimeInput || !endTimeInput || !startTimeDisplay || !endTimeDisplay) {
        console.error('One or more elements are missing in the DOM.');
        return;
      }

      // Ensure values are numeric and within range
      const startTimeValue = parseFloat(startTimeInput.value);
      const endTimeValue = parseFloat(endTimeInput.value);

      if (isNaN(startTimeValue) || isNaN(endTimeValue)) {
        console.error('Start time or end time is not a valid number.');
        return;
      }

      if (startTimeValue < parseFloat(startTimeInput.min) || startTimeValue > parseFloat(startTimeInput.max)) {
        console.error('Start time is out of range.');
        return;
      }

      if (endTimeValue < parseFloat(endTimeInput.min) || endTimeValue > parseFloat(endTimeInput.max)) {
        console.error('End time is out of range.');
        return;
      }

      // Update display
      startTimeDisplay.textContent = formatTime(startTimeValue);
      endTimeDisplay.textContent = formatTime(endTimeValue);
    }

    function formatTime(seconds) {
      const mins = Math.floor(seconds / 60);
      const secs = seconds % 60;
      return mins + ':' + secs.toString().padStart(2, '0');
    }

    function previewTimeRange() {
      const startTime = document.getElementById('start-time').value;
      const endTime = document.getElementById('end-time').value;
      const videoId = document.getElementById('time-selection-dialog').getAttribute('data-video-id');
      const iframe = document.createElement('iframe');
      iframe.src = `https://www.youtube.com/embed/${videoId}?start=${startTime}&end=${endTime}&autoplay=1`;
      iframe.width = '560';
      iframe.height = '315';
      iframe.allowFullscreen = true;
      iframe.style.border = 'none';

      const previewContainer = document.createElement('div');
      previewContainer.style.position = 'fixed';
      previewContainer.style.top = '50%';
      previewContainer.style.left = '50%';
      previewContainer.style.transform = 'translate(-50%, -50%)';
      previewContainer.style.background = '#fff';
      previewContainer.style.padding = '20px';
      previewContainer.style.borderRadius = '10px';
      previewContainer.style.boxShadow = '0 2px 5px rgba(0, 0, 0, 0.2)';
      previewContainer.style.zIndex = '1002';

      const closeButton = document.createElement('button');
      closeButton.textContent = 'Close Preview';
      closeButton.style.marginTop = '10px';
      closeButton.style.padding = '10px 20px';
      closeButton.style.background = '#ff7e5f';
      closeButton.style.color = '#fff';
      closeButton.style.border = 'none';
      closeButton.style.borderRadius = '5px';
      closeButton.style.cursor = 'pointer';
      closeButton.onclick = () => {
        document.body.removeChild(previewContainer);
      };

      previewContainer.appendChild(iframe);
      previewContainer.appendChild(closeButton);
      document.body.appendChild(previewContainer);
    }

    function confirmTimeSelection() {
      const startTime = parseInt(document.getElementById('startTimeSlider').value, 10);
      const endTime = parseInt(document.getElementById('endTimeSlider').value, 10);

      if (startTime >= endTime) {
        alert("Start time must be less than end time. Please adjust your selection.");
        return;
      }

      // Store time range in localStorage for camera.ejs to access
      localStorage.setItem('selectedTimeRange', JSON.stringify({
        videoId: currentVideoId,
        startTime,
        endTime
      }));

      // Close the modal
      closeModal();

      // Redirect to the camera page
      const cameraContainer = document.getElementById('camera-container');
      if (cameraContainer) {
        cameraContainer.style.display = 'flex';
        startCamera(); // Assuming startCamera is defined to initialize the camera
      } else {
        window.location.href = '/camera'; // Fallback to redirect if camera container is not present
      }
    }

    

    async function startCamera() {
      const video = document.getElementById('camera-video');
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        video.srcObject = stream;
      } catch (err) {
        alert('Error accessing camera: ' + err.message);
      }
    }

    function startRecording() {
      alert('Recording started!');
      // Add logic to handle actual recording here
    }

    function setTimer() {
      alert('Timer set!');
      // Add logic to handle timer functionality here
    }

    // Add event listeners for sliders
    document.getElementById('startTimeSlider').addEventListener('input', function() {
      const endSlider = document.getElementById('endTimeSlider');
      if (parseInt(this.value) >= parseInt(endSlider.value)) {
        endSlider.value = parseInt(this.value) + 1;
      }
      updateTimeLabels();
    });

    document.getElementById('endTimeSlider').addEventListener('input', function() {
      const startSlider = document.getElementById('startTimeSlider');
      if (parseInt(this.value) <= parseInt(startSlider.value)) {
        startSlider.value = parseInt(this.value) - 1;
      }
      updateTimeLabels();
    });

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        const modal = document.getElementById('timeSelectionModal');
        if (modal.style.display === 'flex') {
          closeModal();
        }
      }
    });

    function initializeCustomSlider() {
      const slider = document.getElementById('timeRangeSlider');
      const range = document.getElementById('sliderRange');
      const startThumb = document.getElementById('startThumb');
      const endThumb = document.getElementById('endThumb');

      const sliderWidth = slider.offsetWidth;
      const maxTime = videoDuration || 600; // Default to 10 minutes

      function updateRange() {
        const startPercent = (parseInt(startThumb.style.left) || 0) / sliderWidth * 100;
        const endPercent = (parseInt(endThumb.style.left) || sliderWidth) / sliderWidth * 100;
        range.style.left = startPercent + '%';
        range.style.width = (endPercent - startPercent) + '%';

        // Update time labels
        const startTime = Math.round((startPercent / 100) * maxTime);
        const endTime = Math.round((endPercent / 100) * maxTime);
        document.getElementById('startTimeLabel').textContent = formatTime(startTime);
        document.getElementById('endTimeLabel').textContent = formatTime(endTime);
      }

      function moveThumb(thumb, event) {
        const rect = slider.getBoundingClientRect();
        let newLeft = event.clientX - rect.left;
        newLeft = Math.max(0, Math.min(newLeft, sliderWidth));
        thumb.style.left = newLeft + 'px';
        updateRange();
      }

      startThumb.addEventListener('mousedown', () => {
        const onMouseMove = (event) => moveThumb(startThumb, event);
        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', () => {
          document.removeEventListener('mousemove', onMouseMove);
        }, { once: true });
      });

      endThumb.addEventListener('mousedown', () => {
        const onMouseMove = (event) => moveThumb(endThumb, event);
        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', () => {
          document.removeEventListener('mousemove', onMouseMove);
        }, { once: true });
      });

      updateRange();
    }

    document.addEventListener('DOMContentLoaded', () => {
      initializeCustomSlider();
    });
  </script>
</body>
</html>